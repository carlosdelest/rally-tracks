{% import "rally.helpers" as rally %}
{
  "name": "logging-querying-esql",
  "description": "Applies an ESQL query workload. Ensures data streams exist so queries can be run, but does not remove existing data.",
  "parameters": {
    "generate-data": {{ true | tojson if bulk_start_date and bulk_end_date else false | tojson }}
  },
  "schedule": [
    {% include "tasks/many-shards-setup.json" %},
    {% if bulk_start_date and bulk_end_date %}
      {
        "name": "bulk-index",
        "operation": {
          "operation-type": "raw-bulk",
          "param-source": "processed-source",
          "time-format": "milliseconds",
          "profile": "fixed_interval",
          "init-load": true,
          "bulk-size": {{ p_bulk_size }},
          "detailed-results": true
        },
        "clients": {{ p_bulk_indexing_clients }},
        "ignore-response-error-level": "{{error_level | default('non-fatal')}}"
      }
      {%- if force_merge_max_num_segments is defined %},
      {
        "name": "refresh-after-index",
        "index": "logs-*",
        "operation": "refresh"
      },
      {
        "name": "wait-until-index-merges-fininshes",
        "operation": {
          "operation-type": "index-stats",
          "index": "logs-*",
          "condition": {
            "path": "_all.total.merges.current",
            "expected-value": 0
          },
          "retry-until-success": true,
          "include-in-reporting": false
        },
        "tags": ["wait"]
      },
      {
        "operation": {
          "operation-type": "force-merge",
          "index": "logs-*",
          "request-timeout": 36000,
          "max-num-segments": {{ force_merge_max_num_segments | tojson }}
        }
      },
      {
        "name": "wait-until-merges-finish",
        "operation": {
          "operation-type": "index-stats",
          "index": "logs-*",
          "condition": {
            "path": "_all.total.merges.current",
            "expected-value": 0
          },
          "retry-until-success": true,
          "include-in-reporting": false
        }
      },
      {
        "name": "refresh-after-force-merge",
        "index": "logs-*",
        "operation": "refresh"
      }
      {%- endif %}
      ,
    {% endif %}
    {
      "operation": "esql_apache_match_query",
      "clients": 1,
      "warmup-iterations": 5,
      "iterations": 20,
      "tags": ["esql", "search"]
    },
    {
      "operation": "esql_kafka_match_query",
      "clients": 1,
      "warmup-iterations": 5,
      "iterations": 20,
      "tags": ["esql", "search"]
    },
    {
      "operation": "esql_qstr_query",
      "clients": 1,
      "warmup-iterations": 5,
      "iterations": 20,
      "tags": ["esql", "search"]
    },
    {
      "operation": "esql_kql_query",
      "clients": 1,
      "warmup-iterations": 5,
      "iterations": 20,
      "tags": ["esql", "search"]
    },
    {
      "operation": "esql_postgres_qstr_query",
      "clients": 1,
      "warmup-iterations": 5,
      "iterations": 20,
      "tags": ["esql", "search"]
    }{%- if build_flavor != "serverless" or serverless_operator == true %},
    {
      "operation": "disable_query_cache",
      "tags": ["esql", "settings"]
    },
    {
      "operation": "search_kafka_query",
      "clients": 1,
      "warmup-iterations": 10,
      "iterations": 50,
      "tags": ["esql", "search"]
    },
    {
      "operation": "search_postrgres_query",
      "clients": 1,
      "warmup-iterations": 10,
      "iterations": 50,
      "tags": ["esql", "search"]
    },
    {
      "operation": "enable_query_cache",
      "tags": ["esql", "settings"]
    }{%- endif %}
  ]
}
